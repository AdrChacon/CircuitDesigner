package interfaz;

import java.util.Iterator;

import estructuras.List;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

public class TruthTable {
	private List circuitry;
	private List inputsList;
	private int rows;
	private int columns;
	
	public TruthTable(List circuit) {
		this.circuitry = circuit;
		this.inputsList = circuit.findInputGates();
		this.rows = (int) Math.pow(2, inputsList.getSize());
		this.columns = circuitry.getSize();
		TableView table = new TableView();
	}
	
	public void launch() {
		this.createTableColumns();
		this.createTableRows();
	}
	
	private void createTableColumns() {
		for(int column = 1; column <= circuitry.getSize(); column++) {
		TableColumn<ObservableList<Integer>,Integer> tableColumn = new TableColumn();
		tableColumn.setText(circuitry.getNodeInPosition(column).getData().getID());
		tableColumn.setCellValueFactory(row -> {
			Iterator<Integer> iterator = row.getValue().iterator();
			for (int i = 0; i< column; i++) {
				iterator.next();
			}
			return new SimpleIntegerProperty(iterator.next()).asObject();
		});
		tableColumn.getColumns().addAll(tableColumn);
 		
	}
	}
	private void createTableRows() {
		
	}

}
